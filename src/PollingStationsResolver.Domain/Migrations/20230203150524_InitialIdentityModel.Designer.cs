// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PollingStationsResolver.Domain;

#nullable disable

namespace PollingStationsResolver.Domain.Migrations
{
    [DbContext(typeof(PollingStationsResolverContext))]
    [Migration("20230203150524_InitialIdentityModel")]
    partial class InitialIdentityModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.ImportJobAggregate.ImportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Base64File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ImportJobs");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.ImportedPollingStationAggregate.ImportedPollingStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FailMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PollingStationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResolvedAddressStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ImportedPollingStations");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.ImportedPollingStationAggregate.ImportedPollingStationAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("ImportedPollingStationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportedPollingStationId");

                    b.ToTable("ImportedPollingStationAddresses");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.PollingStationAggregate.AssignedAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("HouseNumbers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PollingStationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PollingStationId");

                    b.ToTable("PollingStationAddresses");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.PollingStationAggregate.PollingStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PollingStationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PollingStations");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.ResolvedAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ResolvedAddresses");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.ImportedPollingStationAggregate.ImportedPollingStationAddress", b =>
                {
                    b.HasOne("PollingStationsResolver.Domain.Entities.ImportedPollingStationAggregate.ImportedPollingStation", "ImportedPollingStation")
                        .WithMany("AssignedAddresses")
                        .HasForeignKey("ImportedPollingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportedPollingStation");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.PollingStationAggregate.AssignedAddress", b =>
                {
                    b.HasOne("PollingStationsResolver.Domain.Entities.PollingStationAggregate.PollingStation", "PollingStation")
                        .WithMany("AssignedAddresses")
                        .HasForeignKey("PollingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollingStation");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.ImportedPollingStationAggregate.ImportedPollingStation", b =>
                {
                    b.Navigation("AssignedAddresses");
                });

            modelBuilder.Entity("PollingStationsResolver.Domain.Entities.PollingStationAggregate.PollingStation", b =>
                {
                    b.Navigation("AssignedAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
